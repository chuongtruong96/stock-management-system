package com.example.stationerymgntbe.config;

import com.example.stationerymgntbe.entity.*;
import com.example.stationerymgntbe.repository.*;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.text.Normalizer;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

@Profile("dev")
@Configuration
@RequiredArgsConstructor
@Slf4j
public class DataSeeder {

    private final ProductRepository productRepo;
    private final UnitRepository unitRepo;
    private final CategoryRepository categoryRepo;

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Category definitions ‚îÄ‚îÄ‚îÄ‚îÄÔøΩÔøΩ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    private static final List<Category> PRESET = List.of(
            new Category(null, "BƒÉng keo & Keo d√°n", "Adhesives & Tapes", "ADHESIVE", null),
            new Category(null, "Bao th∆∞ & Phong b√¨", "Envelopes", "ENVELOPE", null),
            new Category(null, "B√¨a / File / Trang k√Ω", "Files & Folders", "FILE", null),
            new Category(null, "B√∫t bi & B√∫t m·ª±c", "Ball-point & Gel Pens", "PEN", null),
            new Category(null, "B√∫t vi·∫øt b·∫£ng", "Whiteboard Markers", "WHITEBOARD", null),
            new Category(null, "B√∫t ch√¨ & Ru·ªôt ch√¨", "Pencils & Leads", "PENCIL", null),
            new Category(null, "B√∫t d·∫° quang / Marker", "Highlighters", "HIGHLIGHTER", null),
            new Category(null, "G√¥m / Xo√° / Correction", "Erasers & Correction", "CORRECTION", null),
            new Category(null, "C·∫Øt, Dao, K√©o & L·ªó ƒë·ª•c", "Cutting & Punching", "CUTTING", null),
            new Category(null, "K·∫πp, Kim, Ghim & B·∫•m", "Clips & Staplers", "CLIP", null),
            new Category(null, "Gi·∫•y ghi ch√∫ & Nh√£n d√°n", "Sticky Notes", "STICKY_NOTE", null),
            new Category(null, "S·ªï / T·∫≠p / Notebook", "Notebooks", "NOTEBOOK", null),
            new Category(null, "Gi·∫•y in & Ti√™u ƒë·ªÅ", "Printing Paper", "PRINT_PAPER", null),
            new Category(null, "D·ª•ng c·ª• ƒëo & Th∆∞·ªõc", "Rulers & Measuring", "RULER", null),
            new Category(null, "Kh√°c", "Miscellaneous", "MISC", null));

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Keyword mapping ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    private static final Map<String, String> KW = Map.ofEntries(
            Map.entry("bƒÉng keo", "ADHESIVE"), Map.entry("keo ", "ADHESIVE"), Map.entry("stick-tack", "ADHESIVE"),
            Map.entry("bao th∆∞", "ENVELOPE"),
            Map.entry("b√¨a", "FILE"), Map.entry("file", "FILE"), Map.entry("folder", "FILE"), Map.entry("mika", "FILE"),
            Map.entry("b√∫t bi", "PEN"), Map.entry(" pen ", "PEN"), Map.entry("b√∫t b·∫£ng", "WHITEBOARD"),
            Map.entry("b√∫t ch√¨", "PENCIL"), Map.entry("ru·ªôt ch√¨", "PENCIL"),
            Map.entry("d·∫° quang", "HIGHLIGHTER"), Map.entry("marker", "HIGHLIGHTER"), Map.entry("l√¥ng d·∫ßu", "HIGHLIGHTER"),
            Map.entry("g√¥m", "CORRECTION"), Map.entry("x√≥a", "CORRECTION"), Map.entry("eraser", "CORRECTION"),
            Map.entry("dao ", "CUTTING"), Map.entry("k√©o ", "CUTTING"), Map.entry("ƒë·ª•c l·ªó", "CUTTING"),
            Map.entry("k·∫πp ", "CLIP"), Map.entry("ghim", "CLIP"), Map.entry("kim b·∫•m", "CLIP"),
            Map.entry("b·∫•m", "CLIP"), Map.entry("g·ª° kim", "CLIP"),
            Map.entry("gi·∫•y ghi ch√∫", "STICKY_NOTE"), Map.entry("tem d√°n", "STICKY_NOTE"), Map.entry("decal", "STICKY_NOTE"),
            Map.entry("s·ªï ", "NOTEBOOK"), Map.entry("t·∫≠p ", "NOTEBOOK"), Map.entry("notebook", "NOTEBOOK"), Map.entry("workbook", "NOTEBOOK"),
            Map.entry("70gsm", "PRINT_PAPER"), Map.entry("80gms", "PRINT_PAPER"), Map.entry("gi·∫•y in", "PRINT_PAPER"), Map.entry("ti√™u ƒë·ªÅ", "PRINT_PAPER"),
            Map.entry("th∆∞·ªõc", "RULER"));

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Unit aliases ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    private static final Map<String, String> UNIT_ALIAS = Map.ofEntries(
            Map.entry("c·ª•c", "c√°i"),
            Map.entry("vi√™n/vƒ©", "vƒ©"), Map.entry("vi√™n", "vƒ©"),
            Map.entry("vƒ©", "vƒ©"),
            Map.entry("b·ªãch", "b·ªãch"));

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helper methods ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    private static String nfc(String s) {
        return Normalizer.normalize(
                s.replace('\u00A0', ' ')
                        .replaceAll("[\\t\\r\\n]", "")
                        .trim().toLowerCase(),
                Normalizer.Form.NFC);
    }

    private static String cell(Row r, int i) {
        Cell c = r.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
        if (c.getCellType() != CellType.STRING) {
            DataFormatter formatter = new DataFormatter();
            return formatter.formatCellValue(c).trim();
        }
        return c.getStringCellValue().trim();
    }

    private String group(String vi) {
        String k = nfc(vi);
        return KW.entrySet().stream()
                .filter(e -> k.contains(e.getKey()))
                .map(Map.Entry::getValue)
                .findFirst().orElse("MISC");
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main seeder (simplified) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    @Bean
    @Transactional
    CommandLineRunner seedData() {
        return args -> {
            log.info("üöÄ Starting data seeding...");

            /* Step 1: Setup categories */
            PRESET.forEach(c -> categoryRepo.findByCodeIgnoreCase(c.getCode())
                    .orElseGet(() -> categoryRepo.save(c)));

            /* Step 2: Setup units */
            Map<String, String> UNITS = Map.ofEntries(
                    Map.entry("c√¢y", "piece"), Map.entry("cu·ªôn", "roll"),
                    Map.entry("x·∫•p", "pack"), Map.entry("h·ªôp", "box"),
                    Map.entry("c√°i", "item"), Map.entry("b·ªô", "set"),
                    Map.entry("chai", "bottle"), Map.entry("bao", "bag"),
                    Map.entry("ream", "ream"), Map.entry("vƒ©", "card"),
                    Map.entry("c·∫∑p", "pair"), Map.entry("·ªëng", "tube"),
                    Map.entry("c·ª•c", "block"), Map.entry("cu·ªën", "book"),
                    Map.entry("b·ªãch", "bag"));

            UNITS.forEach((vn, en) -> {
                String vnN = Normalizer.normalize(vn, Normalizer.Form.NFC);
                unitRepo.findByNameVnIgnoreCase(vnN)
                        .or(() -> unitRepo.findByNameEnIgnoreCase(en))
                        .orElseGet(() -> unitRepo.save(new Unit(null, vnN, en)));
            });

            /* Step 3: Process Excel data */
            try (Workbook wb = WorkbookFactory.create(
                    Objects.requireNonNull(getClass().getResourceAsStream("/VPPham.xlsx")))) {

                Sheet sh = wb.getSheetAt(0);
                boolean header = true;
                AtomicInteger ins = new AtomicInteger();
                AtomicInteger upd = new AtomicInteger();

                log.info("üìä Processing Excel data...");

                for (Row r : sh) {
                    if (header) {
                        header = false;
                        continue;
                    }

                    String code = cell(r, 1);
                    if (code.isBlank()) continue;

                    String nameVi = cell(r, 2);
                    if (nameVi.isBlank()) continue;

                    /* Process unit */
                    String raw = nfc(cell(r, 4))
                            .replaceFirst("^\\d+\\s*", "")
                            .replaceFirst("^\\d+/\\d+\\s*", "");
                    final String unitKey = UNIT_ALIAS.getOrDefault(raw, raw);

                    Unit unit = unitRepo.findByNameVnIgnoreCase(unitKey)
                            .orElseGet(() -> unitRepo.save(new Unit(null, unitKey, unitKey)));

                    Category cat = categoryRepo.findByCodeIgnoreCase(group(nameVi)).orElseThrow();

                    /* Update or insert product */
                    productRepo.findByCode(code).ifPresentOrElse(p -> {
                        boolean changed = false;
                        
                        if (!Objects.equals(p.getName(), nameVi)) {
                            p.setName(nameVi);
                            changed = true;
                        }
                        
                        if (!p.getUnit().equals(unit)) {
                            p.setUnit(unit);
                            changed = true;
                        }
                        
                        if (!p.getCategory().equals(cat)) {
                            p.setCategory(cat);
                            changed = true;
                        }
                        
                        if (changed) {
                            productRepo.save(p);
                            upd.incrementAndGet();
                        }
                    }, () -> {
                        Product newProduct = Product.builder()
                                .code(code)
                                .name(nameVi)  // Store Vietnamese name only
                                .image(null)
                                .unit(unit)
                                .category(cat)
                                .build();
                        productRepo.save(newProduct);
                        ins.incrementAndGet();
                    });
                }

                log.info("‚úÖ Data seeding completed:");
                log.info("   üìù Inserted: {} products", ins.get());
                log.info("   üîÑ Updated: {} products", upd.get());
                log.info("   üí° Translation available via /api/products/translate endpoint");

            } catch (Exception e) {
                log.error("‚ùå Error during seeding: {}", e.getMessage(), e);
            }
        };
    }
}